//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputController/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""bbcd9aca-ae3a-4cae-98e2-9b8c61cc04fd"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2a3345e1-73c4-4e32-863a-f7fe167dcbd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""e2663db9-7cae-4eb1-b946-0d7167666aad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a63c71da-3253-4366-ba94-7391b8bb9eca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Death"",
                    ""type"": ""Button"",
                    ""id"": ""31d788ce-fd93-4565-8df7-0fedfcbb2533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Respawn"",
                    ""type"": ""Button"",
                    ""id"": ""b9183ca0-243e-426b-8df4-e1dcf817c2cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RandomAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3a165c98-5d13-4ef2-a4e4-33b369ab1cda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ec2d331-fb40-47c6-b1e7-8b06825d5246"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aa1ca96-3b6a-4350-b6b4-0ec87a2cacaa"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""fe256ddc-7717-49b8-9b72-e32372c3b0dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75781854-3b16-48ff-982c-b30866c082b0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fe0ca7a-4404-4800-aad5-d083cf88403d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b26bf205-a721-4690-9ecf-373ae1cce140"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12ee6c1b-a23c-43cf-b5bf-7bac796129ac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1ecfc94-83ff-4dc4-a4ff-3a59413ac7ef"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Death"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26c35a0d-8720-4834-be48-6d0388220efd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a175becc-7aa5-4be9-ac67-3bc10e13f91b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RandomAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Jump = m_Controller.FindAction("Jump", throwIfNotFound: true);
        m_Controller_Run = m_Controller.FindAction("Run", throwIfNotFound: true);
        m_Controller_Movement = m_Controller.FindAction("Movement", throwIfNotFound: true);
        m_Controller_Death = m_Controller.FindAction("Death", throwIfNotFound: true);
        m_Controller_Respawn = m_Controller.FindAction("Respawn", throwIfNotFound: true);
        m_Controller_RandomAttack = m_Controller.FindAction("RandomAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_Jump;
    private readonly InputAction m_Controller_Run;
    private readonly InputAction m_Controller_Movement;
    private readonly InputAction m_Controller_Death;
    private readonly InputAction m_Controller_Respawn;
    private readonly InputAction m_Controller_RandomAttack;
    public struct ControllerActions
    {
        private @Controls m_Wrapper;
        public ControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Controller_Jump;
        public InputAction @Run => m_Wrapper.m_Controller_Run;
        public InputAction @Movement => m_Wrapper.m_Controller_Movement;
        public InputAction @Death => m_Wrapper.m_Controller_Death;
        public InputAction @Respawn => m_Wrapper.m_Controller_Respawn;
        public InputAction @RandomAttack => m_Wrapper.m_Controller_RandomAttack;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnJump;
                @Run.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRun;
                @Movement.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Death.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDeath;
                @Death.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDeath;
                @Death.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnDeath;
                @Respawn.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRespawn;
                @Respawn.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRespawn;
                @Respawn.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRespawn;
                @RandomAttack.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRandomAttack;
                @RandomAttack.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRandomAttack;
                @RandomAttack.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRandomAttack;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Death.started += instance.OnDeath;
                @Death.performed += instance.OnDeath;
                @Death.canceled += instance.OnDeath;
                @Respawn.started += instance.OnRespawn;
                @Respawn.performed += instance.OnRespawn;
                @Respawn.canceled += instance.OnRespawn;
                @RandomAttack.started += instance.OnRandomAttack;
                @RandomAttack.performed += instance.OnRandomAttack;
                @RandomAttack.canceled += instance.OnRandomAttack;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IControllerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnDeath(InputAction.CallbackContext context);
        void OnRespawn(InputAction.CallbackContext context);
        void OnRandomAttack(InputAction.CallbackContext context);
    }
}
